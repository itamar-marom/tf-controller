# -- If `true`, install CRDs as part of the helm installation
installCRDs: true
# ServiceAccount
serviceAccount:
  # -- If `true`, create a new service account
  create: true
  # -- Additional Service Account annotations
  annotations: {}
  # -- Service account to be used
  # @default -- tf-controller
  name: ""
# Controller
# -- Provide a name
nameOverride: ""
# -- Provide a fullname
fullnameOverride: ""
# -- Additional pod annotations
podAnnotations: {}
# -- Additional pod labels
podLabels: {}
# -- Number of TF-Controller pods to deploy, more than one is not desirable.
replicaCount: 1
image:
  # -- Controller image repository
  repository: ghcr.io/weaveworks/tf-controller
  # -- Controller image pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  # @default -- `.Chart.AppVersion`
  tag: "v0.13.1"
# -- Controller image pull secret
imagePullSecrets: []
# -- Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 64Mi
# -- Additional container environment variables.
extraEnv: {}
# -- Pod-level security context
podSecurityContext:
  fsGroup: 1337
# -- Container-level security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  seccompProfile:
    type: RuntimeDefault
rbac:
  # -- If `true`, create and use RBAC resources
  create: true
# -- Node Selector properties for the TF-Controller deployment
nodeSelector: {}
# -- Tolerations properties for the TF-Controller deployment
tolerations: []
# -- Affinity properties for the TF-Controller deployment
affinity: {}
# -- Volumes properties for the TF-Controller deployment
volumes: []
# - name: policy-agent
#   secret:
#     secretName: policy-agent-tls
#     optional: false
# -- Volume mounts properties for the TF-Controller deployment
volumeMounts: []
# - name: policy-agent
#   mountPath: "/etc/certs/policy-agent.policy-system.svc/"
#   readOnly: true

# -- PriorityClassName property for the TF-Controller deployment
priorityClassName: ""
# Runner
# -- Level of logging of the controller (Controller)
logLevel: info
# -- Concurrency of the controller (Controller)
concurrency: 24
# -- Argument for `--cert-rotation-check-frequency` (Controller)
certRotationCheckFrequency: 30m0s
# -- Argument for `--cert-validity-duration` (Controller)
certValidityDuration: 6h0m
# -- Argument for `--ca-cert-validity-duration` (Controller)
caCertValidityDuration: 168h0m
# -- Argument for `--events-addr` (Controller). The event address, default to the address of the Notification Controller
eventsAddress: http://notification-controller.flux-system.svc.cluster.local./
awsPackage:
  install: true
  tag: v4.38.0-v1alpha11
  repository: ghcr.io/tf-controller/aws-primitive-modules
# -- Runner-specific configurations
runner:
  image:
    # -- Runner image repository
    repository: ghcr.io/weaveworks/tf-runner
    # -- Runner image tag
    # @default -- `.Chart.AppVersion`
    tag: "v0.13.1"
  grpc:
    # -- Maximum GRPC message size (Controller)
    maxMessageSize: 4
  # -- Timeout for runner-creation (Controller)
  creationTimeout: 5m0s
  serviceAccount:
    # -- If `true`, create a new runner service account
    create: true
    # -- Additional runner service Account annotations
    annotations: {}
    # -- Runner service account to be used
    name: ""
    # -- List of namespaces that the runner may run within
    allowedNamespaces: []
# EKS-specific configurations
# -- Create an AWS EKS Security Group Policy with the supplied Security Group IDs [See](https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#deploy-securitygrouppolicy)
eksSecurityGroupPolicy:
  # -- Create the EKS SecurityGroupPolicy
  create: false
  # -- List of AWS Security Group IDs
  ids: []
  # For example:
  # - sg-1234567890
  # - sg-1234567891
  # - sg-1234567892

# Metrics
metrics:

  # -- Enable Metrics Service
  enabled: false

  # ServiceMonitor
  serviceMonitor:
    # -- Enable ServiceMonitor
    enabled: false
    # -- Install the ServiceMonitor into a different Namespace, as the monitoring stack one
    # @default -- `.Release.Namespace`
    namespace: ''
    # -- Assign additional labels according to Prometheus' serviceMonitorSelector matching labels
    labels: {}
    # -- Assign additional Annotations
    annotations: {}
    # -- Change matching labels
    matchLabels: {}
    # -- Set targetLabels for the serviceMonitor
    targetLabels: []
    endpoint:
      # -- Set the scrape interval for the endpoint of the serviceMonitor
      interval: "15s"
      # -- Set the scrape timeout for the endpoint of the serviceMonitor
      scrapeTimeout: ""
      # -- Set metricRelabelings for the endpoint of the serviceMonitor
      metricRelabelings: []
      # -- Set relabelings for the endpoint of the serviceMonitor
      relabelings: []
